<?phpnamespace Riki\Customer\Observer;use Magento\Framework\Event\ObserverInterface;use Magento\Framework\Phrase;use Magento\Store\Model\ScopeInterface;use Riki\Framework\Helper\Logger\LoggerBuilder;use Magento\Framework\Exception\LocalizedException;class AddressDelete implements ObserverInterface{    /**     * @var     */    protected $_customerSession;    protected $_dataHelper;    protected $_productCartModel;    /**     * @var LoggerBuilder     */    protected $loggerBuilder;    /**     * @var \Magento\Framework\App\Config\ScopeConfigInterface     */    protected $scopeConfig;    /**     * AddressDelete constructor.     * @param \Magento\Customer\Model\Session $customerSession     * @param \Riki\Customer\Helper\Data $dataHelper     * @param \Riki\Subscription\Model\ProductCart\ProductCart $productCartModel     */    public function __construct(        \Magento\Customer\Model\Session $customerSession,        \Riki\Customer\Helper\Data $dataHelper,        \Riki\Framework\Helper\Logger\LoggerBuilder $loggerBuilder,        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,        \Riki\Subscription\Model\ProductCart\ProductCart $productCartModel    ) {        $this->_customerSession = $customerSession;        $this->_dataHelper = $dataHelper;        $this->loggerBuilder = $loggerBuilder;        $this->scopeConfig = $scopeConfig;        $this->_productCartModel = $productCartModel;    }    /**     * @param \Magento\Framework\Event\Observer $observer     * @throws \Magento\Framework\Validator\Exception     */    public function execute(\Magento\Framework\Event\Observer $observer)    {        $messages = [];        $address = $observer->getEvent()->getCustomerAddress();        $addressId = $address->getData('entity_id');        // Check address in subscription        $result = $this->_productCartModel->validateAddress($addressId);        if($result == false){            $messages[] = __('We can\'t delete the address exist in subscription profile. ').$address->getData('riki_nickname');        }        if(count($messages)){            $exception = new \Magento\Framework\Validator\Exception(                new Phrase(implode('<br />',$messages))            );            throw $exception;        }        // NED-2469 Log detail trace before delete        if (!$this->scopeConfig->getValue(            'loggersetting/customer_logger/logger_customer_address_enable_status',            ScopeInterface::SCOPE_STORE        )) {            return;        }        $logger = $this->loggerBuilder            ->setName('Customer_Address')            ->setFileName('address_delete.log')            ->pushHandlerByAlias(LoggerBuilder::ALIAS_DATE_HANDLER)            ->create();        $logger->critical(new LocalizedException(            __('A customer address has been deleted, data: %1', json_encode($address->getData()))        ));    }}