<?php


namespace Nestle\Migration\Model\DataMigration;


use Magento\Framework\DB\Ddl\Table;
use Nestle\Migration\Model\DataMigration;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Zend_Db_Statement_Exception;

class FixConstrain extends AbstractDataMigration
{
    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return AbstractDataMigration
     * @throws Zend_Db_Statement_Exception
     */
    public function run(InputInterface $input, OutputInterface $output)
    {
        $this->fixConstrain($input, $output);

        return parent::run($input, $output); // TODO: Change the autogenerated stub
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @throws Zend_Db_Statement_Exception
     */
    public function fixConstrain(InputInterface $input, OutputInterface $output)
    {
        $adapter = $this->resourceConnection->getConnection("default");
        if (!$adapter->isTableExists("amasty_rewards_rule_customer_group")) {
            return;
        }
        // check existing constrain and still wrong data column type
        $constrains = $this->readConstraints("amasty_rewards_rule_customer_group", "default");
        foreach ($constrains as $constrain) {
            if (isset($constrain["Column_name"]) && $constrain["Column_name"] == "customer_group_id") {
                $columns = $this->readColumns("amasty_rewards_rule_customer_group", "default");
                if (isset($columns["customer_group_id"]["definition"]) && $columns["customer_group_id"]["definition"] == "smallint(5) unsigned") {
                    DataMigration::info("fixing error: Foreign key constraint is incorrectly formed");
                    $adapter->dropForeignKey(
                        $adapter->getTableName("amasty_rewards_rule_customer_group"),
                        $this->resourceConnection->getFkName(
                            $adapter->getTableName("amasty_rewards_rule_customer_group"),
                            "customer_group_id",
                            $adapter->getTableName("customer_group"),
                            "customer_group_id"
                        )
                    );

                    $adapter->changeColumn(
                        $adapter->getTableName("amasty_rewards_rule_customer_group"),
                        "customer_group_id",
                        "customer_group_id",
                        [
                            'type'     => Table::TYPE_INTEGER,
                            'nullable' => false,
                            'unsigned' => true
                        ]
                    );

//                    $adapter->changeColumn(
//                        $adapter->getTableName("customer_group"),
//                        "customer_group_id",
//                        "customer_group_id",
//                        [
//                            'type'     => Table::TYPE_INTEGER,
//                            'nullable' => false,
//                            'unsigned' => true
//                        ]
//                    );

//                    $adapter->addForeignKey(
//                        $this->resourceConnection->getFkName(
//                            $adapter->getTableName("amasty_rewards_rule_customer_group"),
//                            "customer_group_id",
//                            $adapter->getTableName("customer_group"),
//                            "customer_group_id"
//                        ),
//                        $adapter->getTableName("amasty_rewards_rule_customer_group"),
//                        "customer_group_id",
//                        $adapter->getTableName("customer_group"),
//                        "customer_group_id"
//                    );
                }
            }
        }
    }
}
